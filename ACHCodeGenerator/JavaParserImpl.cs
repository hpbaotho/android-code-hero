using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/// <summary>
/// The partial class that corresponds to the JavaParser generated by Antlr.
/// 
/// This is where we will simplify some of the logic used inside the Java.g Antlr grammar
/// file.
/// </summary>
public partial class JavaParser
{
   private List<string> _Links = new List<string>();

   /// <summary>
   /// The list of DGML <Link> markup created during the parse.
   /// </summary>
   public List<string> Links { get{ return _Links; } }
   /// <summary>
   /// Name of the Java package that encapsulates the type represented by the various
   /// DGML Links
   /// </summary>
   public string PackageName { get; set; }

   /// <summary>
   /// You'll notice that the remaining methods are all private. Thatffis because they
   /// are called from within the generated parser code coming out of the Java.g grammar file
   /// </summary>
   /// <param name="prop">An XML attribute / value in the form of x="y"</param>
   private void AddProperty( string prop )
   {
      ( ( CurrentObject_scope ) CurrentObject_stack.Peek() ).context.Properties.Add( prop );
      System.Diagnostics.Debug.WriteLine("AddProperty = " + prop);

   }

   /// <summary>
   /// Wraps some of the complexity in the generated Antlr code in regards to getting at the
   /// container name of the current type being parsed
   /// </summary>
   private string Container
   {
      set
      {
         ( ( CurrentContainer_scope ) CurrentContainer_stack.Peek() ).container = value;
         System.Diagnostics.Debug.WriteLine("Container = " + value);
      }
      get
      {
         return ( ( CurrentContainer_scope ) CurrentContainer_stack.Peek() ).container;
      }
   }
   /// <summary>
   /// The name of the Container associated with the current object being parsed
   /// </summary>
   private string CurrentContextContainer
   {
      set
      {
         ( ( CurrentObject_scope ) CurrentObject_stack.Peek() ).context.Container = value;
         System.Diagnostics.Debug.WriteLine("CurrentContextContainer = " + value);

      }
      get
      {
         return ( ( CurrentObject_scope ) CurrentObject_stack.Peek() ).context.Container;
      }
   }
   /// <summary>
   /// The name of the type currently being parsed
   /// </summary>
   private string CurrentContextName
   {
      set
      {
          ( ( CurrentObject_scope ) CurrentObject_stack.Peek() ).context.Name = value;
          System.Diagnostics.Debug.WriteLine("CurrentContextName = " + value);

      }
      get
      {
         return ( ( CurrentObject_scope ) CurrentObject_stack.Peek() ).context.Name;
      }
   }
   /// <summary>
   /// Takes all the data in the current DGMLContext object and creates the various
   /// Link elements
   /// </summary>
   private void ProcessCurrentObject()
   {
      DGMLContext context = (( CurrentObject_scope ) CurrentObject_stack.Peek()).context;
      AddLink( Container, context.Name, context.Properties.ToArray() );
   }
   /// <summary>
   /// Builds the correct DGML Link string given <paramref name="source"/> and 
   /// <paramref name="target"/>
   /// </summary>
   /// <param name="source">The name of the source node in the link that will be created</param>
   /// <param name="target">The name of the target node in the link that will be created</param>
   private void AddLink( string source, string target )
   {
      AddLink( source, target, null );
   }

   private void AddLink( string source, string target, string[] properties )
   {
      string props = "";

      if( properties != null && properties.Length > 0 )
      {
         StringBuilder builder = new StringBuilder();
         foreach( string str in properties )
         {
            builder.Append( Environment.NewLine );
            builder.Append( "\t" );
            builder.Append( str );
         }

         props = builder.ToString();
      }

      _Links.Add( string.Format( "<Link Source=\"{0}\" Target=\"{1}\" {2} />", source, target, props ) );
   }
}
